

//---------------------------------------
// TYPE_INTRINSICS
//---------------------------------------

// -- PRIMITIVES ------------------------
// these get constructed
// by the parser and the
// initial symbol resolver

<IDENTIFIER>
symbol:
  <id>
traits:
  val() -> String
</IDENTIFIER>

<STRING>
symbol:
  <str>
traits:
  val() -> String
</STRING>

<CHAR>
symbol:
  <char>
traits:
  val() -> Char
</CHAR>

<INTEGER>
symbol:
  <int>
traits:
  val() -> i64
<INTEGER>

<FLOAT>
symbol:
  <float>
traits:
  val() -> f64
</FLOAT>

<OPERATOR>   char code desc
| <op_em>    !    33   exclamation mark
| <op_ns>    #    35   number sign, pound
| <op_ds>    $    36   dollar sign
| <op_pc>    %    37   percent sign
| <op_am>    &    38   ampersand
| <op_lp>    (    40   left paranthesis
| <op_rp>    )    41   right paranthesis
| <op_as>    *    42   asterix
| <op_ps>    +    43   plus sign
| <op_cm>    ,    44   comma
| <op_ms>    -    45   minus sign
| <op_dp>    .    46   decimal point
| <op_sl>    /    47   slash
| <op_cn>    :    58   colon
| <op_se>    ;    59   semicolon
| <op_lt>    <    60   less-than sign
| <op_eq>    =    61   equal sign
| <op_gt>    >    62   greater-than sign
| <op_qm>    ?    63   question mark
| <op_at>    @    64   commercial sign
| <op_ls>    [    91   left square bracket
| <op_bs>    \    92   backslash
| <op_rs>    ]    93   right square bracket
| <op_ci>    ^    94   circumflex
| <op_us>    _    95   underscore
| <op_lb>    {    123  left brace
| <op_vb>    |    124  vertical bar
| <op_rb>    }    125  right brace
| <op_td>    ~    126  tilde
symbol:
  <op>
traits:
</OPERATOR>

<TYPE_IDENTIFER>
symbol:
  <tid>
traits():
  val() -> &<tdef>
</TYPE_IDENTIFER>

<VARIABLE_IDENTIFIER>
symbol:
  <vid>
traits():
  val() -> &<var>
</VARIABLE_IDENTIFIER>

<FUNCTION_IDENTIFIER>
symbol:
  <fid>
traits:
  val() -> &<fun>
</FUNCTION_IDENTIFIER>

<MACRO_IDENTIFIER>
symbol:
  <mid>
traits:
  val() -> &<macro>
</MACRO_IDENTIFIER>

<LABEL_IDENTIFIER>
symbol:
  <lid>
traits:
  val() -> &<lstm>
</LABEL_IDENTIFIER>

// --  ----------------------------------

<TYPE>
| INTRINSIC_TYPE = 0
| POINTER_TYPE   = 1
| ARRAY_TYPE     = 2
| COMPOUND_TYPE  = 3
| FUNCTION_TYPE  = 4
symbol:
  <type>
traits:
  size() -> usize
  tag() -> usize

<INTRINSIC_TYPE>
| INT              = 0
| UINT             = 1
| I(8, 16, 32, 64) = 2
| U(8, 16, 32, 64) = 3
| F(32, 64)        = 4
| BOOL             = 5
symbol:
  <itype>
traits:
  size() -> usize
  tag() -> usize
</INTRINSIC_TYPE>

<POINTER_TYPE>
symbol:
  <ptype>
traits:
  size() -> usize
  type() -> <type>
inf:
  (<op| val = "*">, type: <type>) -> <ptype>
</POINTER_TYPE>

<ARRAY_TYPE>
symbol:
  <atype>
traits:
  size() -> usize
  type() -> <type>
  len() -> <exp>
inf:
  (<op| val = "[">, type: <type>, <op| val = ",">, len: <exp| type.tag = INTRINSIC_TYPE, type.itype.tag = uint>, <op| val = "]">) -> <atype>
</ARRAY_TYPE>

<COMPOUND_TYPE>
symbol:
  <ctype>
traits:
  size() -> usize
  def() -> <tdef>
inf:
  (id: <tid>) -> ctype
</COMPOUND_TYPE>

<FUNCTION_TYPE>
symbol:
  <ftype>
traits:
  size() -> usize
  type() -> <type>
  params() -> <list| tag = TYPE>
inf:
  (<op| val = "(">, params: <list| tag = VARIABLE>, <op| val = ")">, <op| val = "->">, type: <otype>) -> <ftype>
</FUNCTION_TYPE>

<OPTION_TYPE>
| SOME_TYPE
| VOID_TYPE
symbol:
  <otype>
traits:

<VOID_TYPE>
symbol:
  <vtype>
traits:
inf:
  (<mid| val = "void">) -> <vtype>
</VOID_TYPE>

<SOME_TYPE>
symbol:
  <stype>
traits:
  type() -> <type>
inf:
  (type: <type>) -> <stype>
</SOME_TYPE>
</OPTION_TYPE>


<VARIABLE>
symbol:
  <var>
traits:
  id() -> <id>
  type() -> <type>
inf:
  (id: <id>, <op| val = ":">, type: <type>) -> <var>
</VARIABLE>

<TYPE_DECLARATION>
| STRUCT_DECL = 0
| UNION_DECL  = 1
| ENUM_DECL   = 2
symbol:
  <tdecl>
traits:
  id() -> <id>
  size() -> usize
  alignment() -> usize

<STRUCT_DECL>
symbol:
  <sdecl>
traits:
  id() -> <id>
  vars() -> <list| tag = VARIABLE>
  size() -> usize
  alignment() -> usize
  offset() -> [usize]
inf:
  (<mid| val = "s">, id: <id>, <op| val = "{">, vars: <list| tag = VARIABLE>, <op| val = "}">) -> <sdecl>
</STRUCT_DECL>

<UNION_DECL>
symbol:
  <udecl>
traits:
  id() -> <id>
  vars() -> <list| tag = VARIABLE>
  size() -> usize
  alignment() -> usize
  offset() -> [usize]
inf:
  (<mid| val = "u">, id: <id>, <op| val = "{">, vars: <list| tag = VARIABLE>, <op| val = "}">) -> <udecl>
</UNION_DECL>

<ENUM_DECL>
symbol:
  <edecl>
traits:
  id() -> <id>
  size() -> usize
  alignment() -> usize
inf:
  (<mid| val = "e">, id: <id>, <op| val = "{">, vars: <list| tag = id>, <op| val = "}">) -> <udecl>
</ENUM_DECL>
</TYPE_DECLARATION>

<FUNCTION>
symbol:
  <fn>
traits:
  id() -> <id>
  params() -> <list| tag = VAR>
  type() -> <type>
  body() -> <bstm>
inf:
  (id: <id>, <op_lp>, <list| tag = VAR, sep = OP_CM>, <op_rp>, <op_ms>, <op_gt>, type: <type>, body: <bstm>) -> <fn>
</FUNCTION>

<STATEMENT>
| EXPRESION_STATEMENT
| LABEL_STATEMENT
| JUMP_STATEMENT
| BLOCK_STATEMENT
symbol:
  <stm>
traits:

<EXPRESSION_STATEMENT>
symbol:
  <estm>
traits:
  exp() -> <exp>
inf:
  (exp: <exp| type.tag = VOID_TYPE>) -> <estm>
</EXPRESSION_STATEMENT>

<LABEL_STATEMENT>
symbol:
  <lstm>
traits:
  id() -> &<id>
inf:
  (id: <id>, <op_co>) -> <lstm>
</LABEL_STATEMENT>

<JUMP_STATEMENT>
symbol:
  <jstm>
traits:
  label() -> &<label>
inf: [sdf>sdf]
  (<op_ls>, inv: <exp>, <op_gt>, lid: <lid>, <op_rs>) -> jstm
</JUMP_STATEMENT>

<BLOCK_STATEMENT>
symbol:
  <bstm>
traits:
  vars() -> <list| tag = VAR>
  stms() -> <list| tag = STM>
inf:
  (<op_vb, stms: <list| tag = VAR, sep = OP_CM>, <op_lb>, <list| tag = STM>, <op_rb>) -> <bstm>
</BLOCK_STATEMENT>
</STATEMENT>

<EXPRESSION>
| for everything the interpreter can do so this list is gonna be long
traits:
  type() -> <otype>
</EXPRESSION>


//---------------------------------------
// FUNCTION_INTRINSICS
//---------------------------------------

- create intrinsic types:
t_int() -> <int>
t_uint() -> <uint>
t_u8() -> <u8>
t_i8() -> <i8>
t_u16() -> <u16>
t_i16() -> <i16>
t_u32() -> <u32>
t_i32() -> <i32>
t_u64() -> <u64>
t_i64() -> <i64>
t_f32() -> <f32>
t_f32() -> <f32>
t_f64() -> <f64>
t_bool() -> <bool>
t_void() -> <void>

- create pointer type
tp(type: <type>) -> <ptype>

- create array type
ta(type: <type>, len: <exp| type.tag = INTRINSIC_TYPE>) -> <atype>

- create function type
ft(<op| val = "(">, params: <list| tag = VARIABLE>, <op| val = ")">, type: <otype>) -> <ftype>



// NOTES:

[csm] ( exp 1 2 ) returns a expression statement by consuming the return values of the expression
other expression statements are expressions with no return value (or void)

a expression with a expression as its destionation addrs is a call expression
